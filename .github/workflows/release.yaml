name: Create Release on Push

on:
  push:
    branches:
      - main

jobs:
  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.calculate_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Get Previous Release Tag
        id: get_previous_tag
        run: |
          if git describe --tags --abbrev=0 > /dev/null 2>&1; then
            echo "::set-output name=previous_tag::$(git describe --tags --abbrev=0)"
          else
            echo "::set-output name=previous_tag::none"
          fi

      - name: Calculate Version
        id: calculate_version
        run: |
          previous_tag=${{ steps.get_previous_tag.outputs.previous_tag }}
          if [ "$previous_tag" != "none" ]; then
            publish_number=$(echo "$previous_tag" | cut -d '.' -f 1 | cut -c 2-)
            fix_number=$(echo "$previous_tag" | cut -d '.' -f 2)
            release_number=$(echo "$previous_tag" | cut -d '.' -f 3)
            release_number=$((release_number + 1))
          else
            publish_number=1
            fix_number=0
            release_number=1
          fi
          version="V${publish_number}.${fix_number}.${release_number}"
          echo "::set-output name=version::$version"

      - name: Check if Tag Exists
        id: check_tag_exists
        run: git tag -l "${{ steps.calculate_version.outputs.version }}" || echo ""

      - name: Increment Release Number If Tag Exists
        if: steps.check_tag_exists.outputs.stdout != ''
        run: |
          previous_tag=${{ steps.get_previous_tag.outputs.previous_tag }}
          publish_number=$(echo "$previous_tag" | cut -d '.' -f 1 | cut -c 2-)
          fix_number=$(echo "$previous_tag" | cut -d '.' -f 2)
          release_number=$(echo "$previous_tag" | cut -d '.' -f 3)
          release_number=$((release_number + 1))
          echo "V${publish_number}.${fix_number}.${release_number}" > .github/release_version

      - name: Get New Release Version
        if: steps.check_tag_exists.outputs.stdout == ''
        id: get_new_version
        run: |
          echo "${{ steps.calculate_version.outputs.version }}" > .github/release_version

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          tag_name: ${{ steps.get_new_version.outputs.version }}
          release_name: Release ${{ steps.get_new_version.outputs.version }}
          body: |
            ${{ steps.release_notes.outputs.notes }}
          draft: false
          prerelease: false
